
When would you want to use a remote repository rather than keeping all your work local?
A remote repository is really handy when it comes to sharing code, and collaborating on it.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
When you pull changes, you are fetching them from another location - this could be from the remote repository on GitHub, or your local repository. Doing this manually means that you can take care to be pulling the commits from the correct remote and branch. Note the command: '$ git pull <remote> <branch>'.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
FORKS are the remote (GitHub) equivalent to CLONES - both involve making a copy of a repository. CLONING is what you do when you want to make a copy of a repository locally or remotely. FORKING is what you do on GitHub to make a copy of someone else's repository, which you can edit/add to in your GitHub account, without affecting the owner's original repository. BRANCHES could be thought of as "off-shoots" or "sub-categories" coming off the main, master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
It is hugely beneficial to have a copy of the last known state of the remote stored locally - for the purpose of being able to resolve "merge conflicts" - where one might have a commit stored locally, and a commit stored remotley. You can use "git fetch origin master", to update local copies (add any remote commits not stored locally), and "git log origin/master" or "git diff origin/master" to analyse what is causing the merge conflict. Then to resolve the conflict, you need to enter "git merge master origin/master", open up and edit the file causing the conflict, and then commit changes.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could collaborate in real life, with a notepad or over a wipe/chalk board, or even via Skype or e-mail or snail mail. But the trouble with this style of collaboration, is that it is much harder to track down earlier versions of ideas/decisions/changes, particularly if there were a lot of notes/code. Git and GitHub is great for looking for that "needle in the haystack". Of course, there are most probably going to be a few technical hickups on the way, whilst learning to use the framework, but it is one well worth learning!
